#!/usr/bin/env python3

import os

# script for generating several scales as constants

abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)

with open("ConstantValuesGenerated.h", "w") as f:
    print("#ifndef ConstantValuesGenerated_h", file = f)
    print("#define ConstantValuesGenerated_h", file = f)
    print(file = f)
    print("#include <Arduino.h>", file = f)
    print("#include <array>", file = f)
    print(file = f)
    print("// this file is generated by generate_constants.py, do not change manually, edit and rerun generate_constants.py instead", file = f)
    print(file = f)

    # ===== MIDI note number scales =====

    # MIDI note number to frequency
    values = []
    for i in range(128):
        values.append(f"{(440 / 32) * (2 ** ((i - 9) / 12)):#g}f")
    value_list = ", ".join(values)
    print("// MIDI note number to frequency", file = f)
    print(f"PROGMEM const std::array<const float, 128> MIDI_NOTE_FREQ{{{{{value_list}}}}};", file = f)


    # ===== Parameter scales =====

    # linear scale from 0.0 to 1.0
    values = []
    for i in range(128):
        values.append(f"{i / 127:#g}f")
    value_list = ", ".join(values)
    print("// linear scale from 0.0 to 1.0", file = f)
    print(f"PROGMEM const std::array<const float, 128> PARAM_SCALE_LINEAR{{{{{value_list}}}}};", file = f)

    # linear scale from -1.0 to +1.0 with six 0.0 values at the center
    values = []
    for i in reversed(range(62)):
        values.append(f"{-i / 61:#g}f")
    values.append(f"{0:#g}f")
    values.append(f"{0:#g}f")
    values.append(f"{0:#g}f")
    values.append(f"{0:#g}f")
    for i in range(62):
        values.append(f"{i / 61:#g}f")

    value_list = ", ".join(values)
    print("// linear scale from -1.0 to +1.0 with six 0.0 values at the center", file = f)
    print(f"PROGMEM const std::array<const float, 128> PARAM_SCALE_LINEAR_CENTER_ZERO{{{{{value_list}}}}};", file = f)

    # power 2 scale from 0.0 to 1.0
    values = []
    for i in range(128):
        values.append(f"{(i / 127)**2:#g}f")
    value_list = ", ".join(values)
    print("// power 2 scale from 0.0 to 1.0", file = f)
    print(f"PROGMEM const std::array<const float, 128> PARAM_SCALE_POWER{{{{{value_list}}}}};", file = f)

    # envelope time scale from 0.5 to 12000ms
    values = []
    x = 19.2
    y = 0.5
    p = 5
    for i in range(128):
        values.append(f"{abs(round(((i+x)**p-x**p)/((127+x)**p-x**p)*(12000-y)+y, 2))}f")
    value_list = ", ".join(values)
    print("// envelope time scale from 0.5 to 12000ms", file = f)
    print(f"PROGMEM const std::array<const float, 128> PARAM_SCALE_ENV_TIME{{{{{value_list}}}}};", file = f)

    # LFO frequency scale
    values = []
    center = 2
    oct=5
    for i in range(128):
        values.append(f"{center * 2**((i/63.5 - 1) * oct):#g}f")
    value_list = ", ".join(values)
    print("// LFO frequency scale", file = f)
    print(f"PROGMEM const std::array<const float, 128> PARAM_SCALE_LFO_FREQ{{{{{value_list}}}}};", file = f)

    print(file = f)
    print("#endif", file = f)